static DECRYPTION_MAP: phf::Map<&str, char> = phf::phf_map! {
    ".-" => 'A',
    "-..." => 'B',
    "-.-." => 'C',
    "-.." => 'D',
    "." => 'E',
    "..-." => 'F',
    "--." => 'G',
    "...." => 'H',
    ".." => 'I',
    ".---" => 'J',
    "-.-" => 'K',
    ".-.." => 'L',
    "--" => 'M',
    "-." => 'N',
    "---" => 'O',
    ".--." => 'P',
    "--.-" => 'Q',
    ".-." => 'R',
    "..." => 'S',
    "-" => 'T',
    "..-" => 'U',
    "...-" => 'V',
    ".--" => 'W',
    "-..-" => 'X',
    "-.--" => 'Y',
    "--.." => 'Z',
    ".----" => '1',
    "..---" => '2',
    "...--" => '3',
    "....-" => '4',
    "....." => '5',
    "-...." => '6',
    "--..." => '7',
    "---.." => '8',
    "----." => '9',
    "-----" => '0',
    "/" => ' ',
    "--..--" => ',' ,
    ".-.-.-" => '.' ,
    "-.-.-" => ';' ,
    "---..." => ':' ,
    "-..-." => '/' ,
    "-....-" => '-' ,
    ".----." => '\'' ,
    "-.--." => '(' ,
    "-.--.-" => ')' ,
    "..--.-" => '_' ,
    ".--.-." => '@' ,
    "-.-.--" => '!' ,
    ".-..." => '&' ,
    "-...-" => '=' ,
    ".-.-." => '+' ,
    ".-..-." => '"' ,
    "...-..-" => '$' ,
};

static ENCRYPTION_MAP: phf::Map<char, &str> = phf::phf_map! {
    'A'=> ".-" ,
    'B'=> "-..." ,
    'C'=> "-.-." ,
    'D'=> "-.." ,
    'E'=> "." ,
    'F'=> "..-.",
    'G'=> "--." ,
    'H'=> "...." ,
    'I'=> ".." ,
    'J'=> ".---" ,
    'K'=> "-.-" ,
    'L'=> ".-.." ,
    'M'=> "--" ,
    'N'=> "-." ,
    'O'=> "---" ,
    'P'=> ".--." ,
    'Q'=> "--.-" ,
    'R'=> ".-." ,
    'S'=> "..." ,
    'T'=> "-" ,
    'U'=> "..-" ,
    'V'=> "...-" ,
    'W'=> ".--" ,
    'X'=> "-..-" ,
    'Y'=> "-.--" ,
    'Z'=> "--.." ,
    '1'=> ".----" ,
    '2'=> "..---" ,
    '3'=> "...--" ,
    '4'=> "....-" ,
    '5'=> "....." ,
    '6'=> "-...." ,
    '7'=> "--..." ,
    '8'=> "---.." ,
    '9'=> "----." ,
    '0'=> "-----" ,
    ' ' => "/",
    ',' => "--..--",
    '.' => ".-.-.-",
    ';' => "-.-.-",
    ':' => "---...",
    '/' => "-..-.",
    '-' => "-....-",
    '\'' => ".----.",
    '(' => "-.--.",
    ')' => "-.--.-",
    '_' => "..--.-",
    '@' => ".--.-.",
    '!' => "-.-.--",
    '&' => ".-...",
    '=' => "-...-",
    '+' => ".-.-.",
    '"' => ".-..-.",
    '$' => "...-..-"
};

pub struct MorseCode;

impl MorseCode {
    pub fn decrypt(ciphertext: &str) -> String {
        ciphertext
            .replace('_', "-")
            .split_whitespace()
            .map(|segment| DECRYPTION_MAP.get(segment).map(|encoding| encoding.to_string()).unwrap_or(segment.to_owned()))
            .collect()
    }

    pub fn encrypt(plaintext: &str) -> String {
        plaintext
            .to_uppercase()
            .chars()
            .map(|character| ENCRYPTION_MAP.get(&character).cloned().unwrap_or(&character.to_string()).to_owned())
            .collect::<Vec<_>>()
            .join(" ")
    }
}

#[cfg(test)]
mod tests {
    use crate::MorseCode;

    #[test]
    fn encrypt_decrypt() {
        let plaintext = "Pack my box with five dozen liquor jugs.";
        let ciphertext = ".--. .- -.-. -.- / -- -.-- / -... --- -..- / .-- .. - .... / ..-. .. ...- . / -.. --- --.. . -. / .-.. .. --.- ..- --- .-. / .--- ..- --. ... .-.-.-";

        assert_eq!(ciphertext, MorseCode::encrypt(plaintext));
        assert_eq!(plaintext.to_uppercase(), MorseCode::decrypt(ciphertext));
    }
}
